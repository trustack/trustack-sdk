{"mappings":"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","sources":["trustack-lib/src/trustack-lib.js"],"sourcesContent":["export { TrustackHelper, ab2str, decode_base64, encryptText }\r\n\r\n/**\r\n * Helper class to simplify interaction with Trustack Exec nodes. runProcAsync is the primary method for use in the class.\r\n */\r\nclass TrustackHelper {\r\n    /**\r\n     * Constructure\r\n     * @param {*} trustackBootStrapURL \r\n     * @param {*} isServerLocal \r\n     */\r\n    constructor(trustackBootStrapURL = \"https://trstgw1.westus.cloudapp.azure.com:8081\", isServerLocal = false) {\r\n        this.isServerLocal = isServerLocal;\r\n        this.trustackUrl = trustackBootStrapURL;\r\n        this.trustackPath = \"/procedures/\";\r\n    }\r\n\r\n    /**\r\n     * This will format the request ot execute a Procedure, and return the results of the Procedure in JSON format (by default)\r\n     * @param {string} procId Unique ID of the Procedure\r\n     * @param {*} inputs Input data expected by the Procedure\r\n     * @param {function} postCb Callback function to handle the response from the Procedure\r\n     * @param {bool} retRawData Default = false; runProcAsync will assume the return data is in JSON, setting this to true will return the data without parsing as JSON\r\n     */\r\n    runProcAsync(procId, inputs, postCb, retRawData = false) {\r\n        var procAddress = this.trustackUrl + this.trustackPath + procId;\r\n\r\n        var data = {};\r\n        data.procId = procId;\r\n        let userObjStr = encodeURIComponent(JSON.stringify(inputs));\r\n        data.procInputs = userObjStr;\r\n        var start = new Date().getTime();\r\n        let dataStr = JSON.stringify(data);\r\n        dataStr = btoa(dataStr);\r\n\r\n        $.ajax({\r\n            url: procAddress,\r\n            data: dataStr,\r\n            type: 'post',\r\n            success: function (response) {\r\n                if (response != \"\") {\r\n                    let respObj = JSON.parse(response);\r\n                    let outputObj = respObj.output;\r\n                    if (!retRawData) {\r\n                        let outputStr = decode_base64(outputObj);\r\n                        // TODO: We've seen some odd encoding bugs getting data back from the Trustack Exec Nodes, so this is meant to clean that up,\r\n                        // assuming this is meant to be JSON data.\r\n                        outputStr = outputStr.replace('ÿ', '');\r\n                        outputStr = outputStr.replace('¿', '');\r\n                        outputObj = JSON.parse(outputStr);\r\n                    }\r\n                    postCb(start, outputObj);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////\r\n/// UTILS FUNCTIONS\r\n/////////////////////////////////////////////////////////////////\r\n\r\nasync function encryptText(plainText, password) {\r\n    const ptUtf8 = new TextEncoder().encode(plainText);\r\n\r\n    const pwUtf8 = new TextEncoder().encode(password);\r\n    const pwHash = await crypto.subtle.digest('SHA-256', pwUtf8);\r\n\r\n    const iv = new Uint8Array(12); //TODO: Not ideal - fix later\r\n    const alg = { name: 'AES-GCM', iv: iv };\r\n    const key = await crypto.subtle.importKey('raw', pwHash, alg, false, ['encrypt']);\r\n\r\n    return { iv, encBuffer: await crypto.subtle.encrypt(alg, key, ptUtf8) };\r\n}\r\nfunction ab2str(buf) {\r\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(buf)));\r\n}\r\n\r\n// Can't fidn the original source of this - probably somewhere from stackoverflow\r\nfunction decode_base64(s) {\r\n    var b = l = 0, r = '',\r\n        m = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    [].forEach.call(s, function (v) {\r\n        b = (b << 6) + m.indexOf(v); l += 6;\r\n        if (l >= 8) r += String.fromCharCode((b >>> (l -= 8)) & 0xff);\r\n    });\r\n    return r;\r\n}\r\n\r\nfunction isApiUp(apiUrl, success, failure, method = 'GET') {\r\n    var request = new XMLHttpRequest();\r\n    request.open(method, apiUrl, true);\r\n    request.onreadystatechange = function () {\r\n        if (request.readyState === 4) {\r\n            if (request.status === 404) {\r\n                failure();\r\n            }\r\n            else {\r\n                success();\r\n            }\r\n        }\r\n    };\r\n}"],"names":[],"version":3,"file":"trustack-lib.min.js.map"}